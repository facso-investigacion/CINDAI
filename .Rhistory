"Prof. Adjunto" = "Prof. Adjunto"),
jerarquia = case_when(
str_detect(str_to_lower(jerarquia), "titular") ~ "Titular",
str_detect(str_to_lower(jerarquia), "asociado") ~ "Asociado",
str_detect(str_to_lower(jerarquia), "asistente") ~ "Asistente",
str_detect(str_to_lower(jerarquia), "postdoctoral") ~ "Postdoc",
str_detect(str_to_lower(jerarquia), "adjunto") ~ "Adjunto",
str_detect(str_to_lower(jerarquia), "instructor") ~ "Instructor",
str_detect(str_to_lower(jerarquia), "ayudante") ~ "Ayudante",
str_detect(str_to_lower(jerarquia), "evaluado") ~ "No evaluado",
),
# fech_ing_u = year(fech_ing_u),
# ingreso_reciente = case_when(
#   fech_ing_u <= 2014 ~ "Ingreso previo a 2015",
#   fech_ing_u > 2014 & fech_ing_u <= 2020 ~ "Ingreso 2015-2020",
#   fech_ing_u > 2020  ~ "Ingreso 2020-2025"
# ),
jerarquizacion= year(fech_ratif_jerarquia)
)   |>
select(jerarquia_proyecto=jerarquia, rut_investigador=rut, jerarquizacion) |>
distinct(rut_investigador, jerarquia_proyecto, .keep_all = TRUE)
jerarq_wide <- jeraq %>%
pivot_wider(
id_cols = rut_investigador,
names_from = jerarquia_proyecto,
values_from = jerarquizacion
) |>
select(rut_investigador,
instructor= Instructor,
asistente= Asistente,
asociado= Asociado,
titular= Titular) |>
mutate(
rut_investigador= set_variable_labels(rut_investigador, "RUT Investigador"),
instructor= set_variable_labels(instructor, "Jeraquización -- Instructor"),
asistente= set_variable_labels(asistente, "Jerarquización -- Asistente"),
asociado= set_variable_labels(asociado, "Jerarquización -- Asociado"),
titular= set_variable_labels(titular, "Jerarquización -- Titular"),
)
View(jerarq_wide)
rm(list = ls())
#### Procesamiento SEPA-VID ####
# Cargar librerias ----
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(tidyverse,
readxl,
writexl,
janitor,
labelled)
load("input/data/procesadas/proyectos-merge.rdata")
## Jerarquizaciones
jeraq <- read_excel("input/data/original/acad_jerarq.xlsx") |> clean_names() |>
select(jerarquia,
rut,
fech_ratif_jerarquia)
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names() |>
select(jerarquia,
rut,
fech_ratif_jerarquia)
academicos_slice <- academicos %>%
arrange(desc(fech_ratif_jerarquia)) %>%   # Ordena de más reciente a más antiguo
slice_head(n = 49)         # Selecciona los primeros 49 casos
jeraq <- rbind(jeraq, academicos_slice)
jeraq <- jeraq %>%
mutate(
categoria = recode(jerarquia,
"Investigador(a) Postdoctoral" = "Investigador(a) Postdoctoral",
"Pendiente" = "Pendiente",
"Prof. Asistente - Categ. Academica Doc." = "Docente",
"Prof. Asociado - Categ. Academica Doc." = "Docente",
"Prof.Titular - Categ. Academica Doc." = "Docente",
"Prof. Asistente - Categ. Academica Ord." = "Ordinaria",
"Prof. Asociado - Categ. Academica Ord." = "Ordinaria",
"Prof.Titular - Categ. Academica Ord." = "Ordinaria",
"Prof. Adjunto" = "Prof. Adjunto"),
jerarquia = case_when(
str_detect(str_to_lower(jerarquia), "titular") ~ "Titular",
str_detect(str_to_lower(jerarquia), "asociado") ~ "Asociado",
str_detect(str_to_lower(jerarquia), "asistente") ~ "Asistente",
str_detect(str_to_lower(jerarquia), "postdoctoral") ~ "Postdoc",
str_detect(str_to_lower(jerarquia), "adjunto") ~ "Adjunto",
str_detect(str_to_lower(jerarquia), "instructor") ~ "Instructor",
str_detect(str_to_lower(jerarquia), "ayudante") ~ "Ayudante",
str_detect(str_to_lower(jerarquia), "evaluado") ~ "No evaluado",
),
# fech_ing_u = year(fech_ing_u),
# ingreso_reciente = case_when(
#   fech_ing_u <= 2014 ~ "Ingreso previo a 2015",
#   fech_ing_u > 2014 & fech_ing_u <= 2020 ~ "Ingreso 2015-2020",
#   fech_ing_u > 2020  ~ "Ingreso 2020-2025"
# ),
jerarquizacion= year(fech_ratif_jerarquia)
)   |>
select(jerarquia_proyecto=jerarquia, rut_investigador=rut, jerarquizacion) |>
distinct(rut_investigador, jerarquia_proyecto, .keep_all = TRUE)
jerarq_wide <- jeraq %>%
pivot_wider(
id_cols = rut_investigador,
names_from = jerarquia_proyecto,
values_from = jerarquizacion
) |>
select(rut_investigador,
instructor= Instructor,
asistente= Asistente,
asociado= Asociado,
titular= Titular) |>
mutate(
rut_investigador= set_variable_labels(rut_investigador, "RUT Investigador"),
instructor= set_variable_labels(instructor, "Jeraquización: Instructor"),
asistente= set_variable_labels(asistente, "Jerarquización: Asistente"),
asociado= set_variable_labels(asociado, "Jerarquización: Asociado"),
titular= set_variable_labels(titular, "Jerarquización: Titular"),
)
proyectos_merge <- proyectos_merge |>
left_join(jerarq_wide, by="rut_investigador")
View(proyectos_merge)
proyectos_merge <- proyectos_merge |>
mutate(jerarquia_proyecto= case_when(
anio_concurso>titular ~ "Titular",
anio_concurso>asociado & anio_concurso<=titular ~ "Asociado",
anio_concurso>asistente & anio_concurso<=asociado ~ "Asistente",
anio_concurso>instructor & anio_concurso<=asistente ~ "Instructor"),
jerarquia_proyecto= set_variable_labels(jerarquia_proyecto, "Jerarquía en el Proyecto")) |>
select(rut_investigador,
nombre_completo,
sexo,
edad,
edad_tramos,
reparticion,
horas_reales,
jerarquia_actual=jerarquia,
categoria,
codigo_proyecto,
titulo,
institucion,
concurso,
instrumento,
asociativo,
inv_aplicada,
tipo_investigador,
estado_proyecto,
adjudicado,
en_ejecucion,
duracion,
anio_concurso,
fecha_inicio,
fecha_termino,
disciplina_principal,
area_disciplina_principal,
disciplina_exacta_principal,
palabras_claves,
monto_adjudicado,
moneda,
instructor,
asistente,
asociado,
titular,
jerarquia_proyecto,
retiro)
proyectos_merge <- proyectos_merge |>
mutate(jerarquia_proyecto= case_when(
anio_concurso>titular ~ "Titular",
anio_concurso>asociado & anio_concurso<=titular ~ "Asociado",
anio_concurso>asistente & anio_concurso<=asociado ~ "Asistente",
anio_concurso>instructor & anio_concurso<=asistente ~ "Instructor"),
jerarquia_proyecto= set_variable_labels(jerarquia_proyecto, "Jerarquía en el Proyecto")) |>
select(rut_investigador,
nombre_completo,
sexo,
edad,
reparticion,
horas_reales,
jerarquia_actual=jerarquia,
categoria,
codigo_proyecto,
titulo,
institucion,
concurso,
instrumento,
asociativo,
inv_aplicada,
tipo_investigador,
estado_proyecto,
adjudicado,
en_ejecucion,
duracion,
anio_concurso,
fecha_inicio,
fecha_termino,
disciplina_principal,
area_disciplina_principal,
disciplina_exacta_principal,
palabras_claves,
monto_adjudicado,
moneda,
instructor,
asistente,
asociado,
titular,
jerarquia_proyecto,
retiro)
View(proyectos_merge)
data <-
proyectos_merge |>
filter(is.na(retiro)) |>
select(-retiro)
save(data, file="output/data-general.rdata")
retirados <-
proyectos_merge |>
filter(!is.na(retiro))
save(retirados, file="output/retirados.rdata")
load("output/data/data-general.rdata")
load("output/data-general.rdata")
view_df(data)
view_df(data,
show.type = T)
view_df(data,
show.string.values = T)
view_df(data,
show.string.values = T,
wrap.labels = 10)
library(sjPlot)
library(summarytools)
View(data)
library(summarytools)
print(dfSummary(data,
headings=FALSE,
style = "multiline",
plain.ascii = FALSE,
tmp.img.dir = 'tmp',
varnumbers = FALSE,
silent= TRUE,
split.by = NULL),
max.tbl.height = 500,
method = 'render',
# css.class = 'table',
silent = TRUE,
footnote = NA)
load("output/data-general.rdata")
print(dfSummary(data,
headings=FALSE,
style = "multiline",
plain.ascii = FALSE,
tmp.img.dir = 'tmp',
varnumbers = FALSE,
silent= TRUE,
split.by = NULL),
max.tbl.height = 500,
method = 'render',
# css.class = 'table',
silent = TRUE,
footnote = NA)
load("output/data-general.rdata")
print(dfSummary(data,
headings=FALSE,
style = "multiline",
plain.ascii = FALSE,
tmp.img.dir = 'tmp',
varnumbers = FALSE,
silent= TRUE,
split.by = NULL),
max.tbl.height = 500,
method = 'render',
# css.class = 'table',
silent = TRUE,
footnote = NA)
data <- data %>%
mutate(across(where(~inherits(.x, "haven_labelled")), as_factor))
print(dfSummary(data,
headings=FALSE,
style = "multiline",
plain.ascii = FALSE,
tmp.img.dir = 'tmp',
varnumbers = FALSE,
silent= TRUE,
split.by = NULL),
max.tbl.height = 500,
method = 'render',
# css.class = 'table',
silent = TRUE,
footnote = NA)
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
# Cargar librerias ----
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(tidyverse,
readxl,
writexl,
janitor,
labelled)
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
View(academicos)
academicos[duplicated(academicos$rut), ]
duplicados <- academicos[duplicated(academicos$rut), ]
View(duplicados)
duplicados_todos <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
retirados <- read_excel("input/data/original/retirados.xlsx", sheet="Retirados") |> clean_names()
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
academicos <- academicos |>
filter(nota != "DEJACION TRANSITORIA") |>
group_by(rut) |>
summarise(
horas_reales = sum(horas_reales, na.rm = TRUE),
.groups = "drop" # para evitar tibbles agrupados
)
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
academicos<- academicos %>%
filter(nota != "DEJACION TRANSITORIA") %>%
group_by(rut) %>%
summarise(horas_reales = sum(horas_reales, na.rm = TRUE), .groups = "drop")
academicos <- academicos %>%
filter(nota != "DEJACION TRANSITORIA") %>%
group_by(rut) %>%
mutate(horas_reales = sum(horas_reales, na.rm = TRUE)) %>%
slice_head(n = 1) %>%   # conserva solo la primera fila por RUT
ungroup()
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
academicos <- academicos %>%
filter(nota != "DEJACION TRANSITORIA") %>%
group_by(rut) %>%
mutate(horas_reales = sum(horas_reales, na.rm = TRUE)) %>%
slice_head(n = 1) %>%   # conserva solo la primera fila por RUT
ungroup()
academicos <- academicos |>
filter(nota != "DEJACION TRANSITORIA") |>
group_by(rut) |>
summarise(
nombre = first(nombre),    # Mantiene el primer valor
horas_reales = sum(horas_reales, na.rm = TRUE),
.groups = "drop"
)
temp_df <- datos[!duplicated(datos$rut), ]
temp_df <- academicos[!duplicated(datos$rut), ]
temp_df <- academicos[!duplicated(academicos$rut), ]
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
temp_df <- academicos[!duplicated(academicos$rut), ]
View(duplicados)
duplicados <- duplicados |>
filter(nota!="TRANSICION DEJATORIA")
View(duplicados)
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
duplicados <- duplicados |>
filter(nota!="TRANSICION DEJATORIA")
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
duplicados <- duplicados |>
filter(is.na(nota))
View(duplicados)
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(horas_reales = sum(horas_reales), .groups = "drop")
View(duplicados)
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(across(everything(), first),
,horas_reales = sum(horas_reales), .groups = "drop")
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(across(everything(), first),
horas_reales = sum(horas_reales), .groups = "drop")
View(duplicados)
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(horas_reales = sum(horas_reales), .groups = "drop",
across(everything(), first))
View(duplicados)
academicos <- rbind(academicos, duplicados)
View(academicos)
academicos <- rbind(temp_df, duplicados)
View(academicos)
View(temp_df)
temp_df <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
View(temp_df)
temp_df <- academicos[!duplicated(academicos$rut) | !duplicated(academicos$rut, fromLast = TRUE), ]
temp_df <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
retirados <- read_excel("input/data/original/retirados.xlsx", sheet="Retirados") |> clean_names()
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
temp_df <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
View(temp_df)
temp_df <- academicos[!duplicated(academicos$rut) & !duplicated(academicos$rut, fromLast = TRUE), ]
View(temp_df)
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(horas_reales = sum(horas_reales), .groups = "drop",
across(everything(), first))
academicos <- rbind(temp_df, duplicados)
View(academicos)
rm(list = ls())
#### Procesamiento SEPA-VID ####
# Cargar librerias ----
if (!require("pacman")) install.packages("pacman")
library(pacman)
p_load(tidyverse,
readxl,
writexl,
janitor,
labelled)
# Académicos -----
academicos <- read_excel("input/data/original/acad.xlsx") |> clean_names()
retirados <- read_excel("input/data/original/retirados.xlsx", sheet="Retirados") |> clean_names()
# Buscar duplicados
duplicados <- academicos[duplicated(academicos$rut) | duplicated(academicos$rut, fromLast = TRUE), ]
temp_df <- academicos[!duplicated(academicos$rut) & !duplicated(academicos$rut, fromLast = TRUE), ]
# base temporal sin duplicados
duplicados <- duplicados |>
filter(is.na(nota)) |>
group_by(rut) |>
summarise(horas_reales = sum(horas_reales), .groups = "drop",
across(everything(), first))
academicos <- rbind(temp_df, duplicados)
######
retirados <- retirados |> mutate(rut = rut_norm)
academicos_historico <- bind_rows(academicos, retirados)
academicos_historico <- academicos_historico |> select(reparticion,
jerarquia,
sexo,
paterno,
materno,
nombres,
edad,
horas_reales,
fech_ratif_jerarquia,
fech_term_real,
rut) |>
filter(reparticion != "-")
academicos_historico <- academicos_historico %>%
mutate(
reparticion = case_when(
str_detect(str_to_lower(reparticion), "psicología") ~ "Psicología",
str_detect(str_to_lower(reparticion), "sociología") ~ "Sociología",
str_detect(str_to_lower(reparticion), "antropología") ~ "Antropología",
str_detect(str_to_lower(reparticion), "trabajo social") ~ "Trabajo social",
str_detect(str_to_lower(reparticion), "educación") ~ "Educación",
str_detect(str_to_lower(reparticion), "postgrado") ~ "Postgrado",
TRUE ~ NA),
categoria = recode(jerarquia,
"Investigador(a) Postdoctoral" = "Investigador(a) Postdoctoral",
"Pendiente" = "Pendiente",
"Prof. Asistente - Categ. Academica Doc." = "Docente",
"Prof. Asociado - Categ. Academica Doc." = "Docente",
"Prof.Titular - Categ. Academica Doc." = "Docente",
"Prof. Asistente - Categ. Academica Ord." = "Ordinaria",
"Prof. Asociado - Categ. Academica Ord." = "Ordinaria",
"Prof.Titular - Categ. Academica Ord." = "Ordinaria",
"Prof. Adjunto" = "Prof. Adjunto"),
jerarquia = case_when(
str_detect(str_to_lower(jerarquia), "titular") ~ "Titular",
str_detect(str_to_lower(jerarquia), "asociado") ~ "Asociado",
str_detect(str_to_lower(jerarquia), "asistente") ~ "Asistente",
str_detect(str_to_lower(jerarquia), "postdoctoral") ~ NA,
str_detect(str_to_lower(jerarquia), "adjunto") ~ NA,
str_detect(str_to_lower(jerarquia), "instructor") ~ "Instructor",
str_detect(str_to_lower(jerarquia), "ayudante") ~ NA,
str_detect(str_to_lower(jerarquia), "evaluado") ~ NA,
),
# fech_ing_u = year(fech_ing_u),
# ingreso_reciente = case_when(
#   fech_ing_u <= 2014 ~ "Ingreso previo a 2015",
#   fech_ing_u > 2014 & fech_ing_u <= 2020 ~ "Ingreso 2015-2020",
#   fech_ing_u > 2020  ~ "Ingreso 2020-2025"
# ),
retiro = year(fech_term_real),
retiro= ifelse(retiro==2099, 2024, retiro),
nombre_completo = paste(nombres, paterno, materno),
nombre_completo = gsub("\\.", " ", nombre_completo), # Reemplazar puntos por espacio
nombre_completo = gsub("\\_", " ", nombre_completo), # Reemplazar guion bajo por espacio
nombre_completo = gsub("\\-", " ", nombre_completo), # Reemplazar guion por espacio,
) %>%
select(rut_investigador=rut, nombre_completo, sexo,
reparticion, horas_reales, jerarquia, categoria, edad, retiro) |>
mutate(rut_investigador=set_variable_labels(rut_investigador, "RUT Investigador"),
nombre_completo=set_variable_labels(nombre_completo, "Nombre Investigador"),
sexo=set_variable_labels(sexo, "Género Investigador"),
reparticion=set_variable_labels(reparticion, "Departamento Investigador"),
horas_reales=set_variable_labels(horas_reales, "Jornada Investigador"),
jerarquia=set_variable_labels(jerarquia, "Jerarquía actual del Investigador"),
categoria=set_variable_labels(categoria, "Categoría académica del Investigador"),
edad=set_variable_labels(edad, "Edad del Investigador"),
retiro=set_variable_labels(retiro, "Año de retiro"),
)
academicos_historico <- academicos_historico %>%
group_by(rut_investigador) %>%
slice_max(horas_reales, with_ties = FALSE) %>%
ungroup()
#
# ids_duplicados <- academicos_historico %>%
#   count(rut_investigador) %>%
#   filter(n > 1) %>%
#   pull(rut_investigador)
#
# test <- academicos_historico %>%
#   filter(rut_investigador %in% ids_duplicados) %>%
#   arrange(rut_investigador)
# Merge
load("input/data/procesadas/proyectos.rdata")
proyectos_merge <- proyectos |>
right_join(academicos_historico, by="rut_investigador")
proyectos_merge <- proyectos_merge |>
mutate(proyecto_facso= ifelse(retiro>=anio_concurso, 1, 0)) |>
filter(proyecto_facso==1 | is.na(proyecto_facso)) |>
select(-c("investigador", "proyecto_facso"))
save(proyectos_merge, file="input/data/procesadas/proyectos-merge.rdata")
